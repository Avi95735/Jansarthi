<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Cyclone Complaint Portal</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <style>
    * {margin: 0; padding: 0; box-sizing: border-box;}
    body {
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(135deg, #ff512f, #dd2476);
      display: flex; justify-content: center; align-items: center;
      min-height: 100vh; padding: 20px;
    }
    .container {
      width: 100%; max-width: 750px; background: #fff;
      padding: 30px; border-radius: 20px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.2);
      animation: fadeIn 0.8s ease-in-out;
    }
    @keyframes fadeIn { from {opacity: 0; transform: translateY(20px);} to {opacity: 1; transform: translateY(0);} }
    .header-img {width: 100%; height: 200px; object-fit: cover; border-radius: 15px; margin-bottom: 15px;}
    h1 {text-align: center; color: #333; margin-bottom: 20px;}
    .form-group {position: relative; margin-bottom: 20px;}
    label {font-size: 14px; color: #555; font-weight: 600; display: block; margin-bottom: 5px;}
    input[type="text"], textarea {
      width: 100%; padding: 12px 40px 12px 12px;
      border: 2px solid #ddd; border-radius: 10px;
      font-size: 14px; transition: border 0.3s, box-shadow 0.3s;
    }
    input:focus, textarea:focus {border-color: #dd2476; box-shadow: 0 0 6px rgba(221,36,118,0.3); outline: none;}
    textarea {resize: none; height: 100px;}
    .mic-icon {position: absolute; right: 10px; top: 37px; font-size: 20px; color: #dd2476; cursor: pointer; transition: transform 0.2s;}
    .mic-icon:hover {transform: scale(1.2);}
    .upload-btn {
      display: inline-block; width: 100%; padding: 14px;
      background: #dd2476; color: white; font-size: 16px; font-weight: 600;
      border: none; border-radius: 12px; cursor: pointer; margin-bottom: 10px; transition: 0.3s;
    }
    .upload-btn:hover {background: #a81c5c;}
    .preview {margin-top: 10px; display: flex; gap: 10px; flex-wrap: wrap;}
    .preview img, .preview video {width: 80px; height: 80px; border-radius: 10px; object-fit: cover; border: 2px solid #ddd;}
    .gps-info {margin-top: 10px; font-size: 14px; color: #333; font-style: italic;}
    .submit-btn {
      width: 100%; padding: 14px; background: #a81c5c;
      border: none; border-radius: 12px; color: white;
      font-size: 16px; font-weight: 600; cursor: pointer; transition: 0.3s;
    }
    .submit-btn:hover {background: #700f3f; transform: scale(1.02);}
    .success-message {
      display: none; margin-top: 20px; padding: 20px; background: #d4edda;
      border-radius: 12px; color: #155724; text-align: center; font-weight: bold; animation: popIn 0.5s ease-in-out;
    }
    @keyframes popIn {from {transform: scale(0.8); opacity: 0;} to {transform: scale(1); opacity: 1;}}
    .success-message span {color: #28a745; font-weight: 700;}
  </style>
</head>
<body>

  <div class="container">
    <img src="https://pragativadi.com/wp-content/uploads/2025/05/Cyclone-Shakti-May-Form-in-Bay-of-Bengal-Odisha-WB-At-Possible-Risk-739x375.jpg" alt="Cyclone Image" class="header-img">
    <h1>üå™ Cyclone Complaint Portal</h1>
    
    <form id="cycloneForm" action="/submitComplaint" method="POST" enctype="multipart/form-data">
      
      <input type="hidden" name="category" value="Cyclone">

      <div class="form-group">
        <label for="subject">Complaint Subject:</label>
        <input type="text" id="subject" name="subject" value="Cyclone" required>
        <span class="mic-icon" onclick="startVoiceInput('subject')">üé§</span>
      </div>

      <div class="form-group">
        <label for="description">Complaint Description:</label>
        <textarea id="description" name="description" required></textarea>
        <span class="mic-icon" onclick="startVoiceInput('description')">üé§</span>
      </div>

      <div class="form-group">
        <label>Upload Photo or Video:</label>
        <input type="file" id="media" name="media" accept="image/*,video/*" capture="environment" style="display:none;">
        <button type="button" class="upload-btn" onclick="document.getElementById('media').click()">üì∑üé• Capture & Upload</button>
        <div class="preview" id="preview"></div>
      </div>

      <div class="form-group">
        <label for="mobile">Mobile No:</label>
        <input type="tel" id="mobile" name="mobile" required pattern="[0-9]{10}" title="Please enter a 10-digit mobile number">
        <span class="mic-icon" onclick="startVoiceInput('mobile')">üé§</span>
      </div>
      <input type="hidden" id="location" name="location">

      <div class="gps-info" id="gpsInfo">üìç Fetching location...</div>

      <button type="submit" class="submit-btn">Submit Complaint</button>
    </form>

    <div class="success-message" id="successMessage">
      ‚úÖ Complaint Submitted Successfully! <br>
      Your Case ID: <span id="caseId"></span> <br>
      Location: <span id="caseLocation"></span>
    </div>
  </div>

  <script>
    let userLocation = null;

    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          userLocation = { lat: pos.coords.latitude.toFixed(5), lng: pos.coords.longitude.toFixed(5) };
          document.getElementById("gpsInfo").innerText =
            `üìç Location Captured: Latitude ${userLocation.lat}, Longitude ${userLocation.lng}`;
          document.getElementById("location").value = `Lat: ${userLocation.lat}, Lng: ${userLocation.lng}`;
        },
        (err) => {
          document.getElementById("gpsInfo").innerText = "‚ö† Error fetching location: " + err.message;
        }
      );
    } else {
      document.getElementById("gpsInfo").innerText = "‚ùå Geolocation is not supported by your browser.";
    }

    function startVoiceInput(fieldId) {
      if (!('webkitSpeechRecognition' in window)) {
        alert("Sorry, your browser doesn't support voice recognition.");
        return;
      }
      const recognition = new webkitSpeechRecognition();
      recognition.lang = "en-IN";
      recognition.start();
      recognition.onresult = function(event) {
        const transcript = event.results[0][0].transcript;
        let field = document.getElementById(fieldId);
        field.value = field.value ? field.value + " " + transcript : transcript;
      };
      recognition.onerror = function() {
        alert("Voice recognition error. Please try again.");
      };
    }

    document.getElementById("media").addEventListener("change", function(event) {
      const preview = document.getElementById("preview");
      preview.innerHTML = "";
      const file = event.target.files[0];
      if (!file) return;
      if (file.type.startsWith("image/")) {
        const img = document.createElement("img");
        img.src = URL.createObjectURL(file);
        preview.appendChild(img);
      } else if (file.type.startsWith("video/")) {
        const video = document.createElement("video");
        video.src = URL.createObjectURL(file);
        video.controls = true;
        preview.appendChild(video);
      }
    });

    document.getElementById("cycloneForm").addEventListener("submit", async function(e) {
      e.preventDefault();
      const formData = new FormData(this);

      if (!userLocation) {
        alert('Could not get location. Please enable location services and try again.');
        return;
      }

      try {
        const response = await fetch('/submitComplaint', { method: 'POST', body: formData });
        const result = await response.json();

        if (result.success) {
          window.location.href = `/complaint-submitted?caseId=${result.caseId}&subject=${encodeURIComponent(result.subject)}&category=${encodeURIComponent(result.category)}&location=${encodeURIComponent(result.location)}`;
        } else {
          alert('Submission failed: ' + (result.message || 'Unknown error'));
        }
      } catch (error) {
        alert('An error occurred during submission. Please check the console.');
      }
    });
  </script>
</body>
</html>
